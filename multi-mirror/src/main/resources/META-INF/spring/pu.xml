<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.1/core/openspaces-core.xsd">

    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <props>
                <prop key="db.host">10.8.1.63</prop>
                <prop key="db.port">1433</prop>
                <prop key="db.name">TestDB2</prop>
                <prop key="db.username">test</prop>
                <prop key="db.password">default1A</prop>
            </props>
        </property>
    </bean>

    <!--
        A bean that starts up HSQL as a server. Allows to connect to it from within this context as well
        as connecting to it remotely.
     -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
        <property name="url" value="jdbc:sqlserver://${db.host}:${db.port};databaseName=${db.name};integratedSecurity=false"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!--
        Hibernate SessionFactory bean. Uses the pooled data source to connect to the database.
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="${entities.package}" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.default_schema">dbo</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.SQLServer2008Dialect</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
    </bean>

    <!--
        An external data source that will be responsible for persisting changes done on the cluster that
        connects to this mirror using Hibernate.
    -->
   <!--  <bean id="hibernateSpaceSynchronizationEndpoint" class="org.openspaces.persistency.hibernate.DefaultHibernateSpaceSynchronizationEndpointFactoryBean">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="useMerge" value="true"/>
    </bean> -->

    <bean id="hibernateSpaceSynchronizationEndpoint" class="com.gigaspaces.util.mirror.monitor.Mirror" >
        <constructor-arg name="sessionFactory" ref="sessionFactory" />
        <constructor-arg name="useMerge" value="true" />
        <property name="spaceName" value="${space.name}"  />  
        <property name="spaceInstanceId" value="${space.instance.id}"  />  
        <property name="lookupLocator" value="${space.host}:4174"/>
    </bean> 
    <!--
        The mirror space. Uses the Hibernate external data source. Persists changes done on the Space that
        connects to this mirror space into the database using Hibernate.
    -->
    <os-core:space id="mirror" url="/./${mirror.name}" schema="mirror" space-sync-endpoint="hibernateSpaceSynchronizationEndpoint">
        <os-core:properties>
            <props>
                <prop key="space-config.mirror-service.cluster.name">${space.name}</prop>
                <prop key="space-config.mirror-service.cluster.partitions">${space.partitions}</prop>
                <prop key="space-config.mirror-service.cluster.backups-per-partition">${space.backups}</prop>
                <prop key="space-config.mirror-service.operation-grouping">group-by-replication-bulk</prop>
                <!-- <prop key="space-config.mirror-service.operation-grouping">group-by-space-transaction</prop>
                <prop key="space-config.mirror-service.distributed-transaction-processing.wait-timeout">120000</prop>
                <prop key="space-config.mirror-service.distributed-transaction-processing.wait-for-operations">10000</prop> -->
            </props>
        </os-core:properties>
    </os-core:space>
</beans>
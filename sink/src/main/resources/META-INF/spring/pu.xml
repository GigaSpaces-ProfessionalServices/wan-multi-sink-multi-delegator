<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xmlns:os-gateway="http://www.openspaces.org/schema/core/gateway"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.1/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/10.1/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/10.1/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/10.1/sla/openspaces-sla.xsd
       http://www.openspaces.org/schema/core/gateway http://www.openspaces.org/schema/10.1/core/gateway/openspaces-gateway.xsd">

    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />
       
    <!--
    We need to deploy as many of these "sink PUs" as there are partition in the **source** Space.

    This is because the sink Space calculates which delegator to talk to using the "running number"
    of its partition. Running number is a partition counter that is incremented in order of partition
    instantiation by the Space deployment process.

    If we don't make a similarly-named sink available (by deploying enough), the expected sink
    will not be able to connect to its upstream delegator, which it looks up by name.

    There is no restriction on the number of partitions on the **sink** Space. This is because
    the gateway connections are unaware of one-another and the downstream-of-sink replication
    channel can accept replication packets from more than one connection at a time.
    -->
    <os-gateway:sink id="sink" local-gateway-name="${sink.name}"
                     gateway-lookups="gatewayLookups" local-space-url="jini://*/*/${destination.space}?locators=${destination.host}:4174" start-embedded-lus="false">
        <os-gateway:sources>
            <os-gateway:source name="${delegator.name}"/>
        </os-gateway:sources>
    </os-gateway:sink>

    <!--
    Here we expect to find the same number of (WAN-embedded) lookup services as there are
    delegators. The lookup services are started inside of the delegator beans during WAN
    gateway bootstrap.

    The reason we need multiple Lookup Services per site (i.e. New York and London) is that
    WAN subcomponents would be same-named across gateway connections. Providing the deployment count
    prevents cross-talk.
    -->
    <os-gateway:lookups id="gatewayLookups">
        <os-gateway:lookup gateway-name="LONDON_1" host="${destination.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_2" host="${destination.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_3" host="${destination.host}" discovery-port="4174"/>
    </os-gateway:lookups>
</beans>
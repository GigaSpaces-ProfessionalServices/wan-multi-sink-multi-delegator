<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xmlns:os-gateway="http://www.openspaces.org/schema/core/gateway"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.1/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/10.1/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/10.1/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/10.1/sla/openspaces-sla.xsd
       http://www.openspaces.org/schema/core/gateway http://www.openspaces.org/schema/10.1/core/gateway/openspaces-gateway.xsd">

    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
        <property name="properties">
            <props>
                <prop key="stats.interval">5000</prop>
            </props>
        </property>
    </bean>
    
    <context:component-scan base-package="com.gigaspaces.gigapro" />
      
    <task:annotation-driven scheduler="scheduler"/>
    <task:scheduler id="scheduler" pool-size="1"/>
     
    <bean id="sinkWriteTpStatistics" class="com.gigaspaces.gigapro.SinkWriteTpStatistics">
        <constructor-arg name="sinkName" value="LONDON_${clusterInfo.instanceId}"/>
    </bean>
   
    <bean id="sinkWriteTpInterceptor" class="com.gigaspaces.gigapro.SinkWriteTpInterceptor" />
       
    <!--
        We need to deploy as many of these "sink PUs" as there are "delegator PUs" that equal to partitions count in the **source** Space.
        
        This is because the source space calculates which delegator to talk to using delegator name and "instance number". 
        Instance number is an instance counter that is incremented by the Space deployment process while instantiation the sink.
        
        There is no restriction on the number of partitions on the **sink** Space. This is because
        the gateway connections are unaware of one-another and the downstream-of-sink replication
        channel can accept replication packets from more than one connection at a time.
        
        If we don't make a similarly-named sink available (by deploying enough), the expected sink
        will not be able to connect to its upstream delegator, which it looks up by name.
        
        'start-embedded-lus' option controls whether Lookup Services are started inside of the delegator beans during
        gateway bootstrap. It is disabled to reuse the Lookup Services deployed to ${source.host} and ${destination.host} hosts.

    -->
   <os-gateway:sink id="sink" local-gateway-name="LONDON_${clusterInfo.instanceId}"
                     gateway-lookups="gatewayLookups" local-space-url="jini://*/*/${destination.space}?locators=${destination.host}:4174" start-embedded-lus="false">
        <os-gateway:sources>
            <os-gateway:source name="NEWYORK_${clusterInfo.instanceId}"/>
        </os-gateway:sources>
        <os-gateway:sync-endpoint-interceptor interceptor="sinkWriteTpInterceptor"/>
    </os-gateway:sink>
    
    <!-- Single gateway setup -->
    <!-- <os-gateway:sink id="sink" local-gateway-name="LONDON"
                     gateway-lookups="gatewayLookups" local-space-url="jini://*/*/${destination.space}?locators=${destination.host}:4174" start-embedded-lus="false">
        <os-gateway:sources>
            <os-gateway:source name="NEWYORK"/>
        </os-gateway:sources>
        <os-gateway:sync-endpoint-interceptor interceptor="sinkWriteTpInterceptor"/>
    </os-gateway:sink> -->
    <!--
        Here we expect to find the same number 'LONDON' gateway lookups as the count of source space partition primary instances.
        
        All the gateway lookups are registered in the Lookup services already started on ${destination.host} on port 4174.
        
        To switch to multiple WAN embedded Lookup Services per London site set 'start-embedded-lus' option to true.
        To fix the port that is used for delegator-sink communication, use 'communication-port' option. 
    -->
    <os-gateway:lookups id="gatewayLookups">
        <os-gateway:lookup gateway-name="LONDON_1" host="${destination.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_2" host="${destination.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_3" host="${destination.host}" discovery-port="4174"/>
    </os-gateway:lookups>
    
    <!-- Single gateway setup -->
   <!--  <os-gateway:lookups id="gatewayLookups">
        <os-gateway:lookup gateway-name="LONDON" host="${destination.host}" discovery-port="4174"/>
    </os-gateway:lookups> -->
</beans>
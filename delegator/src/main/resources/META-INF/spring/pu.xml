<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xmlns:os-gateway="http://www.openspaces.org/schema/core/gateway"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.1/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/10.1/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/10.1/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/10.1/sla/openspaces-sla.xsd
       http://www.openspaces.org/schema/core/gateway http://www.openspaces.org/schema/10.1/core/gateway/openspaces-gateway.xsd">

    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
    
    <!--
        We need to deploy as many of these "delegator PUs" as there are partitions in the source Space. In current setup the source space uses 3:0 cluster topology.

        This is because the source Space calculates which delegator to talk to using delegator name and "instance number". 
        Instance number is an instance counter that is incremented by the Space deployment process while instantiation the delegator.

        If we don't make a similarly-named delegator available (by deploying enough), the source Space will
        not be able to connect to its expected delegator, which it looks up by name.
        
        'start-embedded-lus' option controls whether Lookup Services are started inside of the delegator beans during
        gateway bootstrap. It is disabled to reuse the Lookup Services deployed to ${source.host} and ${destination.host} hosts.
    -->
    <os-gateway:delegator id="delegator" local-gateway-name="NEWYORK_${clusterInfo.instanceId}" gateway-lookups="gatewayLookups" start-embedded-lus="false">
        <os-gateway:delegations>
            <os-gateway:delegation target="LONDON_${clusterInfo.instanceId}"/>
        </os-gateway:delegations>
    </os-gateway:delegator>

    <!--
        Here we expect to find the same number of 'NEWYORK' and 'LONDON' gateway lookups as the count of source space partition primary instances.
        
        All 6 gateway lookups are registered in the 2 Lookup services already started on ${source.host} and ${destination.host} on port 4174.
        
        To switch to multiple WAN embedded Lookup Services per site (i.e. New York and London) set 'start-embedded-lus' option to true.
        To fix the port that is used for delegator-sink communication, use 'communication-port' option. 
    -->
    <os-gateway:lookups id="gatewayLookups">
        <os-gateway:lookup gateway-name="NEWYORK_1" host="${source.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="NEWYORK_2" host="${source.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="NEWYORK_3" host="${source.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_1" host="${destination.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_2" host="${destination.host}" discovery-port="4174"/>
        <os-gateway:lookup gateway-name="LONDON_3" host="${destination.host}" discovery-port="4174"/>
    </os-gateway:lookups>
</beans>